var documenterSearchIndex = {"docs":
[{"location":"man/logger_guide/#Custom-Logging-User-Guide","page":"Custom Logging User Guide","title":"Custom Logging User Guide","text":"","category":"section"},{"location":"man/logger_guide/","page":"Custom Logging User Guide","title":"Custom Logging User Guide","text":"Examples of logging ... go here ","category":"page"},{"location":"lib/internals/#Package-Internals","page":"Package Internals","title":"Package Internals","text":"","category":"section"},{"location":"lib/internals/#Prototypes-Module","page":"Package Internals","title":"Prototypes Module","text":"","category":"section"},{"location":"lib/internals/","page":"Package Internals","title":"Package Internals","text":"Modules = [Prototypes]\nPublic = false","category":"page"},{"location":"lib/internals/#Prototypes.shorten_path_str-Tuple{AbstractString}","page":"Package Internals","title":"Prototypes.shorten_path_str","text":"shorten_path_str(path::AbstractString; max_length::Int=40, strategy::Symbol=:truncate_middle)\n\nShorten a file path string to a specified maximum length using various strategies.\n\nArguments\n\npath::AbstractString: The input path to be shortened\nmax_length::Int=40: Maximum desired length of the output path\nstrategy::Symbol=:truncate_middle: Strategy to use for shortening. Options:\n:no: Return path unchanged\n:truncate_middle: Truncate middle of path components while preserving start/end\n:truncate_to_last: Keep only the last n components of the path\n:truncate_from_right: Progressively remove characters from right side of components\n:truncate_to_unique: Reduce components to unique prefixes\n\nReturns\n\nString: The shortened path\n\nExamples\n\n```julia\n\nUsing different strategies\n\njulia> shortenpathstr(\"/very/long/path/to/file.txt\", max_length=20) \"/very/.../file.txt\"\n\njulia> shortenpathstr(\"/usr/local/bin/program\", strategy=:truncatetolast) \"/bin/program\"\n\njulia> shortenpathstr(\"/home/user/documents/verylongfilename.txt\", strategy=:truncatemiddle) \"/home/user/doc…ents/very…name.txt\"\n\n\n\n\n\n","category":"method"},{"location":"demo/stata_utils/","page":"-","title":"-","text":"Some examples of stata utilities.","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public Interface","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#Prototypes-Module","page":"Public Interface","title":"Prototypes Module","text":"","category":"section"},{"location":"lib/public/","page":"Public Interface","title":"Public Interface","text":"Modules = [Prototypes]\nPrivate = false","category":"page"},{"location":"lib/public/#Prototypes.custom_logger-Tuple{Prototypes.LogSink}","page":"Public Interface","title":"Prototypes.custom_logger","text":"custom_logger(filename; kw...)\n\nArguments\n\nfilename::AbstractString: base name for the log files\noutput_dir::AbstractString=./log/: name of directory where log files are written\nfiltered_modules_specific::Vector{Symbol}=nothing: which modules do you want to filter out of logging (only for info and stdout) Some packages just write too much log ... filter them out but still be able to check them out in other logs\nfiltered_modules_all::Vector{Symbol}=nothing: which modules do you want to filter out of logging (across all logs)  Examples could be TranscodingStreams (noticed that it writes so much to logs that it sometimes slows down I/O)\nlog_date_format::AbstractString=\"yyyy-mm-dd\": time stamp format at beginning of each logged lines for dates\nlog_time_format::AbstractString=\"HH:MM:SS\": time stamp format at beginning of each logged lines for times\ndisplaysize::Tuple{Int,Int}=(50,100): how much to show on log (same for all logs for now!)\nlog_format::Symbol=:pretty: how to format the log; I have added an option for log4j (all or nothing for now)\noverwrite::Bool=false: do we overwrite previously created log files\n\nThe customlogger function creates four files in `outputdirfor four different levels of logging:     from least to most verbose:filename.info.log.jl,filename.warn.log.jl,filename.debug.log.jl,filename.full.log.jlThe debug logging offers the option to filter messages from specific packages (some packages are particularly verbose) using thefilter` optional argument The full logging gets all of the debug without any of the filters. Info and warn log the standard info and warning level logging messages.\n\nNote that the default overwrites old log files (specify overwrite=false to avoid this).\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Prototypes.panel_fill!-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}","page":"Public Interface","title":"Prototypes.panel_fill!","text":"panel_fill!(...)\n\nSame as panel_fill but with modification in place\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Prototypes.panel_fill-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}","page":"Public Interface","title":"Prototypes.panel_fill","text":"panel_fill(\n    df::DataFrame,\n    id_var::Symbol, \n    time_var::Symbol, \n    value_var::Union{Symbol, Vector{Symbol}};\n    gap::Union{Int, DatePeriod} = 1, \n    method::Symbol = :backwards, \n    uniquecheck::Bool = true,\n    flag::Bool = false,\n    merge::Bool = false\n)\n\nArguments\n\ndf::AbstractDataFrame: a panel dataset\nid_var::Symbol: the individual index dimension of the panel\ntime_var::Symbol: the time index dimension of the panel (must be integer or a date)\nvalue_var::Union{Symbol, Vector{Symbol}}: the set of columns we would like to fill\n\nKeywords\n\ngap::Union{Int, DatePeriod} = 1 : the interval size for which we want to fill data\nmethod::Symbol = :backwards: the interpolation method to fill the data   options are: :backwards (default), :forwards, :linear, :nearest   email me for other interpolations (anything from Interpolations.jl is possible)\nuniquecheck::Bool = true: check if panel is clean\nflag::Bool = false: flag the interpolated values\nmerge::Bool = false: merge the new values with the input dataset\n\nReturns\n\nAbstractDataFrame: \n\nExamples\n\nSee tests\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Prototypes.tabulate-Tuple{DataFrames.AbstractDataFrame, Union{Symbol, Vector{Symbol}}}","page":"Public Interface","title":"Prototypes.tabulate","text":"tabulate(df::AbstractDataFrame, cols::Union{Symbol, Array{Symbol}};\n    reorder_cols=true, out::Symbol=:stdout)\n\nThis was forked from TexTables.jl and was inspired by https://github.com/matthieugomez/statar\n\nArguments\n\ndf::AbstractDataFrame: Input DataFrame to analyze\ncols::Union{Symbol, Vector{Symbol}}: Single column name or vector of column names to tabulate\ngroup_type::Union{Symbol, Vector{Symbol}}=:value: Specifies how to group each column:\n:value: Group by the actual values in the column\n:type: Group by the type of values in the column\nVector{Symbol}: Vector combining :value and :type for different columns\nreorder_cols::Bool=true  Whether to sort the output by sortable columns\nformat_tbl::Symbol=:long How to present the results long or wide (stata twoway)\nformat_stat::Symbol=:freq  Which statistics to present for format :freq or :pct\nout::Symbol=:stdout  Output format:\n:stdout  Print formatted table to standard output (returns nothing)\n:df  Return the result as a DataFrame\n:string Return the formatted table as a string\n\nReturns\n\nNothing if out=:stdout\nDataFrame if out=:df\nString if out=:string\n\nOutput Format\n\nThe resulting table contains the following columns:\n\nSpecified grouping columns (from cols)\nfreq: Frequency count\npct: Percentage of total\ncum: Cumulative percentage\n\nTO DO\n\nallow user to specify order of columns (reorder = false flag)\n\nExamples\n\nSee the README for more examples\n\n# Simple frequency table for one column\ntabulate(df, :country)\n\n## Group by value type\ntabulate(df, :age, group_type=:type)\n\n# Multiple columns with mixed grouping\ntabulate(df, [:country, :age], group_type=[:value, :type])\n\n# Return as DataFrame instead of printing\nresult_df = tabulate(df, :country, out=:df)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Prototypes.winsorize-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Public Interface","title":"Prototypes.winsorize","text":"winsorize(\n    x::AbstractVector; \n    probs::Union{Tuple{Real, Real}, Nothing} = nothing,\n    cutpoints::Union{Tuple{Real, Real}, Nothing} = nothing,\n    replace::Symbol = :missing\n    verbose::Bool=false\n)\n\nArguments\n\nx::AbstractVector: a vector of values\n\nKeywords\n\nprobs::Union{Tuple{Real, Real}, Nothing}: A vector of probabilities that can be used instead of cutpoints\ncutpoints::Union{Tuple{Real, Real}, Nothing}: Cutpoints under and above which are defined outliers. Default is (median - five times interquartile range, median + five times interquartile range). Compared to bottom and top percentile, this takes into account the whole distribution of the vector\nreplace::Symbol:  Values by which outliers are replaced. Default to cutpoints. A frequent alternative is NA.\nverbose::Bool: printing level\n\nReturns\n\nAbstractVector: A vector the size of x with substituted values \n\nExamples\n\nSee tests\n\nThis code is based on Matthieu Gomez winsorize function in the statar R package \n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Prototypes.xtile-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Real","page":"Public Interface","title":"Prototypes.xtile","text":"xtile(data::Vector{T}, n_quantiles::Integer, \n             weights::Union{Vector{Float64}, Nothing}=nothing)::Vector{Int} where T <: Real\n\nCreate quantile groups using Julia's built-in weighted quantile functionality.\n\nArguments\n\ndata: Values to group\nn_quantiles: Number of groups\nweights: Optional weights of weight type (StatasBase)\n\nExamples\n\nsales = rand(10_000);\na = xtile(sales, 10);\nb = xtile(sales, 10, weights=Weights(repeat([1], length(sales))) );\n@assert a == b\n\n\n\n\n\n","category":"method"},{"location":"#Test","page":"Home","title":"Test","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a test of the doc for Prototypes.jl","category":"page"}]
}
